// Code generated by MockGen. DO NOT EDIT.
// Source: wishlist_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	payload "wishlist/dto/payload"
	response "wishlist/dto/response"
	model "wishlist/model"

	gomock "github.com/golang/mock/gomock"
)

// MockWishlistService is a mock of WishlistService interface.
type MockWishlistService struct {
	ctrl     *gomock.Controller
	recorder *MockWishlistServiceMockRecorder
}

// MockWishlistServiceMockRecorder is the mock recorder for MockWishlistService.
type MockWishlistServiceMockRecorder struct {
	mock *MockWishlistService
}

// NewMockWishlistService creates a new mock instance.
func NewMockWishlistService(ctrl *gomock.Controller) *MockWishlistService {
	mock := &MockWishlistService{ctrl: ctrl}
	mock.recorder = &MockWishlistServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWishlistService) EXPECT() *MockWishlistServiceMockRecorder {
	return m.recorder
}

// CreateWishlist mocks base method.
func (m *MockWishlistService) CreateWishlist(payload payload.Wishlist, auth string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWishlist", payload, auth)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWishlist indicates an expected call of CreateWishlist.
func (mr *MockWishlistServiceMockRecorder) CreateWishlist(payload, auth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWishlist", reflect.TypeOf((*MockWishlistService)(nil).CreateWishlist), payload, auth)
}

// DeleteWishlist mocks base method.
func (m *MockWishlistService) DeleteWishlist(wishlistId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWishlist", wishlistId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWishlist indicates an expected call of DeleteWishlist.
func (mr *MockWishlistServiceMockRecorder) DeleteWishlist(wishlistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWishlist", reflect.TypeOf((*MockWishlistService)(nil).DeleteWishlist), wishlistId)
}

// ReadRecommend mocks base method.
func (m *MockWishlistService) ReadRecommend(wishlistId string) (response.RecommendWishlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadRecommend", wishlistId)
	ret0, _ := ret[0].(response.RecommendWishlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadRecommend indicates an expected call of ReadRecommend.
func (mr *MockWishlistServiceMockRecorder) ReadRecommend(wishlistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadRecommend", reflect.TypeOf((*MockWishlistService)(nil).ReadRecommend), wishlistId)
}

// ReadWishlist mocks base method.
func (m *MockWishlistService) ReadWishlist(auth string) ([]model.Wishlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadWishlist", auth)
	ret0, _ := ret[0].([]model.Wishlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadWishlist indicates an expected call of ReadWishlist.
func (mr *MockWishlistServiceMockRecorder) ReadWishlist(auth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadWishlist", reflect.TypeOf((*MockWishlistService)(nil).ReadWishlist), auth)
}

// UpdateBalance mocks base method.
func (m *MockWishlistService) UpdateBalance(payload payload.SavingMoney, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalance", payload, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBalance indicates an expected call of UpdateBalance.
func (mr *MockWishlistServiceMockRecorder) UpdateBalance(payload, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalance", reflect.TypeOf((*MockWishlistService)(nil).UpdateBalance), payload, id)
}

// UpdateWishlist mocks base method.
func (m *MockWishlistService) UpdateWishlist(payload payload.WishlistUpdate, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWishlist", payload, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWishlist indicates an expected call of UpdateWishlist.
func (mr *MockWishlistServiceMockRecorder) UpdateWishlist(payload, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWishlist", reflect.TypeOf((*MockWishlistService)(nil).UpdateWishlist), payload, id)
}
